// Generated by CoffeeScript 1.6.2
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Game = (function(_super) {
    __extends(Game, _super);

    function Game() {
      _ref = Game.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Game.prototype.url = function() {
      return '/json';
    };

    Game.prototype.defaults = {
      board: new Board,
      players: {
        player1: {
          type: 'human',
          marker: 'x'
        },
        player2: {
          type: 'human',
          marker: 'o'
        }
      },
      currentPlayer: 'x',
      currentMove: 'first-move',
      message: ''
    };

    Game.prototype.sync = function(callback) {
      var dataHash, url,
        _this = this;

      url = this.url();
      dataHash = this.dataHash();
      return $.ajax(url, {
        data: dataHash,
        error: function(jqXHR, textStatus, errorThrown) {
          return "error";
        },
        success: function(data, textStatus, jqXHR) {
          return _this.parse(data);
        }
      });
    };

    Game.prototype.dataHash = function() {
      return $.extend({
        move: this.get('currentMove'),
        marker: this.get('currentPlayer'),
        player1: this.get('players').player1.marker,
        player1type: this.get('players').player1.type,
        player2: this.get('players').player2.marker,
        player2type: this.get('players').player2.type
      }, this.boardHash());
    };

    Game.prototype.boardHash = function() {
      var hash, space_number, value;

      hash = (function() {
        var _ref1, _results;

        _ref1 = this.get('board').get('spaces');
        _results = [];
        for (space_number in _ref1) {
          value = _ref1[space_number];
          _results.push("\"" + space_number + "\":\"" + value + "\"");
        }
        return _results;
      }).call(this);
      return $.parseJSON("{" + hash + "}");
    };

    Game.prototype.parse = function(data, callback) {
      var json;

      json = data;
      this.get('board').set('spaces', this.parseBoard(json.board));
      this.set('currentPlayer', json.currentPlayer);
      return this.set('players', {
        player1: {
          marker: json.player1.marker,
          type: json.player1.type
        },
        player2: {
          marker: json.player2.marker,
          type: json.player2.type
        }
      });
    };

    Game.prototype.parseBoard = function(board_array) {
      var board, space_number, value;

      return board = (function() {
        var _results;

        _results = [];
        for (space_number in board_array) {
          value = board_array[space_number];
          if (value === 'nil') {
            _results.push(null);
          } else {
            _results.push(value);
          }
        }
        return _results;
      })();
    };

    return Game;

  })(Backbone.Model);

}).call(this);
