// Generated by CoffeeScript 1.6.2
(function() {
  var _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Game = (function(_super) {
    __extends(Game, _super);

    function Game() {
      _ref = Game.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Game.prototype.url = function() {
      return '/json/';
    };

    Game.prototype.defaults = {
      board: new Board,
      players: {
        player1: 'x',
        player2: 'o'
      },
      currentPlayer: {
        player1: 'x'
      }
    };

    Game.prototype.sync = function() {
      var url;

      url = this.url();
      return $.ajax(url, function() {
        return {
          type: 'GET',
          dataType: 'html',
          error: function(jqXHR, textStatus, errorThrown) {
            return "error";
          },
          success: function(data, textStatus, jqXHR) {
            return this.parse(data);
          }
        };
      });
    };

    Game.prototype.parse = function(data) {
      var json;

      json = JSON.parse(data.responseText);
      this.get('board').set('spaces', this.parseBoard(json.board));
      this.set('currentPlayer', json.currentPlayer);
      return this.set('players', {
        player1: json.player1,
        player2: json.player2
      });
    };

    Game.prototype.parseBoard = function(board_array) {
      var board, space_number, value;

      return board = (function() {
        var _results;

        _results = [];
        for (space_number in board_array) {
          value = board_array[space_number];
          if (value === 'nil') {
            _results.push(null);
          } else {
            _results.push(value);
          }
        }
        return _results;
      })();
    };

    return Game;

  })(Backbone.Model);

  window.GameView = (function(_super) {
    __extends(GameView, _super);

    function GameView() {
      this.renderBoard = __bind(this.renderBoard, this);      _ref1 = GameView.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    GameView.prototype.el = '#board';

    GameView.prototype.renderBoard = function() {
      var space_number, spaces, value;

      return spaces = (function() {
        var _ref2, _results;

        _ref2 = this.model.get('board').get('spaces');
        _results = [];
        for (space_number in _ref2) {
          value = _ref2[space_number];
          _results.push("<div id=\"" + space_number + "\" class=\"space\">" + value + "</div>");
        }
        return _results;
      }).call(this);
    };

    GameView.prototype.render = function() {
      var html;

      html = this.renderBoard();
      return $(this.el).html(html);
    };

    GameView.prototype.makeMove = function(event) {
      var player_marker, space_index;

      space_index = event.target.id;
      player_marker = this.model.get('currentPlayer');
      this.model.get('board').setSpace(space_index, player_marker);
      return this.render();
    };

    GameView.prototype.events = {
      'click .space': 'makeMove'
    };

    return GameView;

  })(Backbone.View);

}).call(this);
