// Generated by CoffeeScript 1.6.2
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.ConfigView = (function(_super) {
    __extends(ConfigView, _super);

    function ConfigView() {
      this.updateConfiguration = __bind(this.updateConfiguration, this);      _ref = ConfigView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ConfigView.prototype.el = '#config';

    ConfigView.prototype.events = {
      'change input:radio[name=type]': 'lerg'
    };

    ConfigView.prototype.updateConfiguration = function(event) {
      var player, type;

      player = event.target.parentElement.parentElement.className;
      type = event.target.value;
      return console.log(type);
    };

    ConfigView.prototype.render = function() {
      var data, html;

      data = this.model.get('players');
      html = "    <div class='player1'>      Player 1 <br />      <span class='player1marker'>" + data.player1.marker + "</span><br />      <form class='type'>        <input type='radio' name='type' value='human' checked='checked'>Human</input>        <input type='radio' name='type' value='easy'>Easy AI</input>        <input type='radio' name='type' value='ultimate'>Ultimate AI</input>      </form>    </div>        <div class='player2'>      Player 2 <br />      <span class='player2marker'>" + data.player2.marker + "</span><br />      <form class='type'>        <input type='radio' name='type' value='human' checked='checked'>Human</input>        <input type='radio' name='type' value='easy'>Easy AI</input>        <input type='radio' name='type' value='ultimate'>Ultimate AI</input>      </form>    </div>";
      return $(this.el).html(html);
    };

    return ConfigView;

  })(Backbone.View);

}).call(this);
