// Generated by CoffeeScript 1.6.2
(function() {
  describe('Board', function() {
    var board, fakeData, mockResponse;

    board = null;
    mockResponse = {
      newBoard: {
        success: {
          status: 200,
          responseText: '{"currentPlayer" : "x", "currentMove" : "first-move", "player1": {"type":"human", "marker":"x"}, "player2": {"type":"human", "marker":"o"}, "board":["nil", "nil", "nil", "nil", "nil", "nil", "nil", "nil", "nil"], "message": ""}'
        }
      }
    };
    beforeEach(function() {
      var spy;

      spy = spyOn($, "ajax");
      spy.andCallFake(function() {
        return mockResponse.newBoard.success;
      });
      return board = new Board;
    });
    fakeData = "You can put your return data here";
    it('constructs a Board object', function() {
      return expect(board).not.toBe(null);
    });
    it('has a spaces array, filled with nulls', function() {
      return expect(board.get('spaces')).toEqual([null, null, null, null, null, null, null, null, null]);
    });
    it('has a default url', function() {
      return expect(board.url()).toEqual('/json/');
    });
    return it('fetches remote data', function() {
      return expect(board.fetch()).toEqual(mockResponse.newBoard.success.responseText.board);
    });
  });

  describe('BoardView', function() {
    var boardView;

    boardView = null;
    beforeEach(function() {
      var board;

      board = new Board;
      return boardView = new BoardView({
        model: board
      });
    });
    it('constructs a Board object', function() {
      return expect(boardView).not.toBe(null);
    });
    return it('renders all of a board\'s spaces', function() {
      expect(boardView.renderSpaces()).toContain('<div id=\"0\"></div>');
      return expect(boardView.renderSpaces().length).toEqual(9);
    });
  });

}).call(this);
