// Generated by CoffeeScript 1.6.2
(function() {
  describe('Game', function() {
    var game, mockResponse;

    game = null;
    mockResponse = {
      newBoard: {
        success: {
          status: 200,
          responseText: '{"currentPlayer" : "x", "currentMove" : "first-move", "player1": {"type":"human", "marker":"x"}, "player2": {"type":"human", "marker":"o"}, "board":["nil", "nil", "nil", "nil", "nil", "nil", "nil", "nil", "nil"], "message": ""}'
        }
      }
    };
    beforeEach(function() {
      var spy;

      game = new Game;
      return spy = spyOn($, "ajax").andCallFake(function() {
        return game.parse(mockResponse.newBoard.success);
      });
    });
    it('constructs a game object', function() {
      return expect(game).toBeDefined();
    });
    it('has a board, players and a current player', function() {
      expect(game.get('board')).toToBeDefined;
      expect(game.get('players')).toEqual({
        player1: 'x',
        player2: 'o'
      });
      return expect(game.get('currentPlayer')).toEqual({
        player1: 'x'
      });
    });
    it('has a default url', function() {
      return expect(game.url()).toEqual('/json/');
    });
    return it('parses the hash returned from the server', function() {
      var response;

      response = JSON.parse(mockResponse.newBoard.success.responseText);
      game.sync();
      expect(game.sync).toHaveBeenCalled;
      expect(game.get('board').get('spaces')).toEqual([null, null, null, null, null, null, null, null, null]);
      expect(game.get('currentPlayer')).toEqual('x');
      return expect(game.get('players')).toEqual({
        player1: response.player1,
        player2: response.player2
      });
    });
  });

  describe('GameView', function() {
    var gameView;

    gameView = null;
    beforeEach(function() {
      var game;

      game = new Game;
      return gameView = new GameView({
        model: game
      });
    });
    it('constructs a Board object', function() {
      return expect(gameView).not.toBe(null);
    });
    it('renders all of a board\'s spaces', function() {
      expect(gameView.renderBoard()).toContain('<div id=\"0\" class=\"space\">null</div>');
      return expect(gameView.renderBoard().length).toEqual(9);
    });
    return it('makes a move on and re-renders the board', function() {
      gameView.makeMove({
        target: 1
      });
      return expect(Game.render).toHaveBeenCalled;
    });
  });

}).call(this);
